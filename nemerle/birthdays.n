using System;
using System.Console;
using System.Collections;
using System.IO;
//using Log;

class Log {
  //private static starttime : DateTime = DateTime.Now;
  public static log(text: string) : void {
    //WriteLine("LOG " + ((DateTime.Now - Log.starttime) :> TimeSpan).ToString() + ": " + text);
  }
}

class birthday : IComparable {
  public year : short = -1;
  public month : short = -1;
  public day : short = -1;
  public name : string = null;

  public CompareTo(other: object) : int {
    def md = this.month - (other :> birthday).month;
    if (md == 0) {
      def dd = this.day - (other :> birthday).day;
      if (dd == 0) {
        def yd = this.year - (other :> birthday).year;
        if (yd == 0) {
          this.name.CompareTo((other :> birthday).name);
        } else {
          -yd; // youngest first (and therefore *today* at the top)
        }
      } else dd;
    } else md;
  }

  public this(input: string) {
    def split : array[string] = input.Split(null, 4);
    name = split[3];
    
    try { this.year = Convert.ToInt16(split[0]); }
    catch {| _e is FormatException => { this.year = -1; } }
    try { this.month = Convert.ToInt16(split[1]); }
    catch {| _e is FormatException => { this.month = -1; } }
    try { this.day = Convert.ToInt16(split[2]); }
    catch {| _e is FormatException => { this.day = -1; } }
  }

  public printData(whichyear = -1) : void {
    Write(this.year.ToString("0000;?   "));
    Write("-");
    Write(this.month.ToString("00;? "));
    Write("-");
    Write(this.day.ToString("00;? "));
    Write(": ");
    Write(this.name);
    unless (whichyear == -1 || this.year == -1) 
      Write($" ($(whichyear - this.year))");
    WriteLine();
  }
}

Log.log("started.");
Log.log("searching birthdays");
def datafile = Environment.GetEnvironmentVariable("HOME") + "/birthdays";
//System.Console.WriteLine(datafile);

Log.log("opening file...");

def sr = StreamReader(File.OpenRead(datafile));

Log.log("reading file...");
def list = ArrayList();
for (mutable l = sr.ReadLine(); l != null; l = sr.ReadLine())
  _ = list.Add(birthday(l));
Log.log("closing file...");
sr.Close();

Log.log("adding today");
def now = DateTime.Now;
def today = birthday($"$(now.Year) $(now.Month) $(now.Day) \x1b[1m*** TODAY ***");
_ = list.Add(today);

Log.log("starting to sort dates...");
list.Sort(); //bComparer());
Log.log("finished sorting dates");

Log.log("seeking today");
def todayindex = list.BinarySearch(today);
Log.log("found today");

def showbefore = 3;
def showafter = 5;

Log.log("(possibly) showing dates from last year");
// we should show more than we have this year before today
when (showbefore - todayindex > 0) {
  for (mutable i = showbefore - todayindex; i > 0; i--)
    // only show if not longer ago than a year
    when (list.Count - i > todayindex)
      (list.Item[list.Count - i] :> birthday).printData(now.Year - 1);
  WriteLine("-----------");
}

Log.log("showing dates before today");
// all dates from this year that are before today
for (mutable i = showbefore; i > 0; i--)
  when (todayindex - i >= 0)
    (list.Item[todayindex - i] :> birthday).printData(now.Year);

Log.log("showing today");
Write("\x1b[3m");
today.printData();
Write("\x1b[m");

Log.log("showing future dates");
for (mutable i = 1; i <= showafter; i++)
  when (todayindex + i < list.Count)
    (list.Item[todayindex + i] :> birthday).printData(now.Year);

Log.log("showing next year's dates");
when (todayindex + showafter >= list.Count) {
  WriteLine("-----------");
  for (mutable i = 0; i < (todayindex + showafter) - list.Count; i++)
    when (i < todayindex)
      (list.Item[i] :> birthday).printData(now.Year + 1);
}
